import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã
QUESTIONS = [
    {
        "question": "–ö–∞–∫–æ–π —É –≤–∞—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
        "options": [
            ("–Ø—Ä–∫–∏–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π", "trumpet"),
            ("–°–ø–æ–∫–æ–π–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π", "trombone"),
            ("–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π", "saxophone"),
            ("–°–µ—Ä—å–µ–∑–Ω—ã–π –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "tuba"),
        ],
    },
    {
        "question": "–ö–∞–∫–æ–π –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏ –≤–∞–º –±–ª–∏–∂–µ?",
        "options": [
            ("–î–∂–∞–∑", "trumpet"),
            ("–ö–ª–∞—Å—Å–∏–∫–∞", "french_horn"),
            ("–§–∞–Ω–∫/–°–æ—É–ª", "trombone"),
            ("–í–æ–µ–Ω–Ω—ã–µ –º–∞—Ä—à–∏", "sousaphone"),
        ],
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫?",
        "options": [
            ("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", "trumpet"),
            ("–ö–æ—Ñ–µ", "clarinet"),
            ("–ö–æ–∫—Ç–µ–π–ª—å", "saxophone"),
            ("–ü–∏–≤–æ", "tuba"),
        ],
    },
    {
        "question": "–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "options": [
            ("–í—ã—Å—Ç—É–ø–∞—é –Ω–∞ –ø—É–±–ª–∏–∫–µ", "trumpet"),
            ("–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏", "french_horn"),
            ("–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "trombone"),
            ("–û—Ç–¥—ã—Ö–∞—é –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ", "bassoon"),
        ],
    },
]

INSTRUMENTS = {
    "trumpet": {
        "name": "–¢—Ä—É–±–∞",
        "description": "–í—ã - —Ç—Ä—É–±–∞! –Ø—Ä–∫–∏–π, –≥—Ä–æ–º–∫–∏–π –∏ –≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è. "
        "–ö–∞–∫ –∏ —Ç—Ä—É–±–∞, –≤—ã –ª—é–±–∏—Ç–µ –±—ã—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–ª–∞–Ω–µ –∏ –∑–∞—Ä—è–∂–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏–µ–π –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.",
        "image": "https://brassbook.ru/images/trumpet.jpg",
    },
    "trombone": {
        "name": "–¢—Ä–æ–º–±–æ–Ω",
        "description": "–í—ã - —Ç—Ä–æ–º–±–æ–Ω! –î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. "
        "–ö–∞–∫ –∏ —Ç—Ä–æ–º–±–æ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º - —Ç–æ –≤–µ—Å–µ–ª—ã–º –∏ –∑–∞–¥–æ—Ä–Ω—ã–º, —Ç–æ –≥–ª—É–±–æ–∫–∏–º –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–º.",
        "image": "https://brassbook.ru/images/trombone.jpg",
    },
    "saxophone": {
        "name": "–°–∞–∫—Å–æ—Ñ–æ–Ω",
        "description": "–í—ã - —Å–∞–∫—Å–æ—Ñ–æ–Ω! –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, —Å—Ç–∏–ª—å–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π. "
        "–ö–∞–∫ –∏ —Å–∞–∫—Å–æ—Ñ–æ–Ω, –≤—ã —É–º–µ–µ—Ç–µ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ –ª—é–±—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å.",
        "image": "https://brassbook.ru/images/saxophone.jpg",
    },
    "tuba": {
        "name": "–¢—É–±–∞",
        "description": "–í—ã - —Ç—É–±–∞! –ù–∞–¥–µ–∂–Ω—ã–π, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ. "
        "–ö–∞–∫ –∏ —Ç—É–±–∞, –≤—ã - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞ –≤–∞—Å –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
        "image": "https://brassbook.ru/images/tuba.jpg",
    },
    "french_horn": {
        "name": "–í–∞–ª—Ç–æ—Ä–Ω–∞",
        "description": "–í—ã - –≤–∞–ª—Ç–æ—Ä–Ω–∞! –£—Ç–æ–Ω—á–µ–Ω–Ω—ã–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π. "
        "–ö–∞–∫ –∏ –≤–∞–ª—Ç–æ—Ä–Ω–∞, –≤—ã —Ü–µ–Ω–∏—Ç–µ –∫—Ä–∞—Å–æ—Ç—É –∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤–æ –≤—Å–µ–º.",
        "image": "https://brassbook.ru/images/french_horn.jpg",
    },
    "sousaphone": {
        "name": "–°—É–∑–∞—Ñ–æ–Ω",
        "description": "–í—ã - —Å—É–∑–∞—Ñ–æ–Ω! –Ø—Ä–∫–∏–π, –Ω–µ–æ–±—ã—á–Ω—ã–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è. "
        "–ö–∞–∫ –∏ —Å—É–∑–∞—Ñ–æ–Ω, –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å –≤—ã–¥–µ–ª—è—Ç—å—Å—è –∏–∑ —Ç–æ–ª–ø—ã –∏ –∏–¥—Ç–∏ —Å–≤–æ–∏–º –ø—É—Ç–µ–º.",
        "image": "https://brassbook.ru/images/sousaphone.jpg",
    },
    "clarinet": {
        "name": "–ö–ª–∞—Ä–Ω–µ—Ç",
        "description": "–í—ã - –∫–ª–∞—Ä–Ω–µ—Ç! –£–º–Ω—ã–π, –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π. "
        "–ö–∞–∫ –∏ –∫–ª–∞—Ä–Ω–µ—Ç, –≤—ã —É–º–µ–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ –æ—Ç –¥—Ä—É–≥–∏—Ö.",
        "image": "https://brassbook.ru/images/clarinet.jpg",
    },
    "bassoon": {
        "name": "–§–∞–≥–æ—Ç",
        "description": "–í—ã - —Ñ–∞–≥–æ—Ç! –ù–µ–æ–±—ã—á–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ –∏ –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º. "
        "–ö–∞–∫ –∏ —Ñ–∞–≥–æ—Ç, –≤—ã —É–º–µ–µ—Ç–µ —É–¥–∏–≤–ª—è—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö —Å–≤–æ–∏–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –∂–∏–∑–Ω–∏.",
        "image": "https://brassbook.ru/images/bassoon.jpg",
    },
}


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚ú®\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ BrassBook —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
        "–ù–∞–∂–º–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!"
    )


# /test
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["test_answers"] = []
    context.user_data["current_question"] = 0
    await ask_question(update, context)


# –≤–æ–ø—Ä–æ—Å
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_data = QUESTIONS[context.user_data["current_question"]]
    keyboard = []

    for text, instrument in question_data["options"]:
        keyboard.append([InlineKeyboardButton(text, callback_data=instrument)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"–í–æ–ø—Ä–æ—Å {context.user_data['current_question'] + 1}/{len(QUESTIONS)}:\n\n{question_data['question']}",
            reply_markup=reply_markup,
        )
    else:
        await update.message.reply_text(
            text=f"–í–æ–ø—Ä–æ—Å {context.user_data['current_question'] + 1}/{len(QUESTIONS)}:\n\n{question_data['question']}",
            reply_markup=reply_markup,
        )


# –æ—Ç–≤–µ—Ç
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data["test_answers"].append(query.data)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    context.user_data["current_question"] += 1
    if context.user_data["current_question"] < len(QUESTIONS):
        await ask_question(update, context)
    else:
        await finish_test(update, context)


# —Ä–µ–∑—É–ª—å—Ç–∞—Ç
async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Å–∞–º–æ–º—É —á–∞—Å—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    answers = context.user_data["test_answers"]
    result = max(set(answers), key=answers.count)

    instrument = INSTRUMENTS[result]

    await update.callback_query.edit_message_text(
        text=f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ\n\n"
        f"–¢–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: <b>{instrument['name']}</b>\n\n"
        f"{instrument['description']}\n\n"
        f"–•–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ {instrument['name']} –∏–ª–∏ –¥—Ä—É–≥–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ? "
        f"–ó–∞—Ö–æ–¥–∏ –Ω–∞ <a href='#'>BrassBook</a> - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è! üéµ",
        parse_mode="HTML",
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /test"
        )
    else:
        await update.message.reply_text(
            text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /test"
        )


def main() -> None:
    # Application –ø–æ —Ç–æ–∫–µ–Ω—É
    application = Application.builder().token("7845233409:AAE1lR2YFnj4b5e8DZUKp7bHchvWHoXn_1U").build()

    # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", start_test))
    application.add_handler(CallbackQueryHandler(button))

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –∑–∞–ø—É—Å–∫
    application.run_polling()


if __name__ == "__main__":
    main()